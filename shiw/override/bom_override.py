




# # import frappe
# # from frappe.utils import flt
# # from erpnext.manufacturing.doctype.bom.bom import BOM
# # from decimal import Decimal, ROUND_HALF_UP

# # def rounded(val, precision=2):
# #     if val is None:
# #         val = 0
# #     return float(Decimal(val).quantize(Decimal(f"1.{'0' * precision}"), rounding=ROUND_HALF_UP))

# # class CustomBOM(BOM):
# #     def apply_custom_item_rates(self):
# #         for item in self.items:
# #             if item.rate:
# #                 item.amount = rounded(item.rate * item.qty, 2)

# #         self.update_totals()

# #     def update_totals(self):
# #         total = 0.0
# #         for item in self.items:
# #             total += rounded(item.amount, 2)

# #         self.total_cost = rounded(total, 2)
# #         self.total_raw_material_cost = self.total_cost
# #         self.raw_material_cost = self.total_cost
# #         self.total_operating_cost = rounded(self.operating_cost or 0, 2)
# #         self.total_cost += self.total_operating_cost

# #         self.base_raw_material_cost = self.raw_material_cost
# #         self.base_total_operating_cost = self.total_operating_cost
# #         self.base_total_cost = self.total_cost

# #     def validate(self):
# #         self.apply_custom_item_rates()
# #         super().validate()

# #     def on_submit(self):
# #         super().on_submit()
# #         frappe.enqueue("shiw.tasks.fix_bom_item_rates", bom_name=self.name)

# #     def validate_update_after_submit(self):
# #         """Avoid float errors like 3904.342 != 3904.3419999999996"""
# #         for field in ["raw_material_cost", "operating_cost", "total_cost"]:
# #             old = rounded(self.get_db_value(field), 2)
# #             new = rounded(getattr(self, field), 2)
# #             if abs(old - new) > 0.01:  # Only raise if significant
# #                 frappe.throw(f"Not allowed to change {field} after submission from {old} to {new}")






# import frappe
# from frappe.utils import flt
# from erpnext.manufacturing.doctype.bom.bom import BOM

# class CustomBOM(BOM):
#     def apply_custom_item_rates(self):
#         for item in self.items:
#             if item.rate:
#                 item.amount = round(item.rate * item.qty, 2)

#         self.update_totals()

#     def update_totals(self):
#         total = 0.0
#         for item in self.items:
#             total += flt(item.amount)

#         self.total_cost = round(total, 2)
#         self.total_raw_material_cost = self.total_cost
#         self.raw_material_cost = self.total_cost
#         self.total_operating_cost = flt(self.operating_cost or 0)
#         self.total_cost += self.total_operating_cost

#         self.base_raw_material_cost = self.raw_material_cost
#         self.base_total_operating_cost = self.total_operating_cost
#         self.base_total_cost = self.total_cost

#     def validate(self):
#         self.apply_custom_item_rates()
#         self.validate_update_after_submit()
#         super().validate()

#     def on_submit(self):
#         super().on_submit()
#         frappe.enqueue("shiw.tasks.fix_bom_item_rates", bom_name=self.name)


#         def validate_update_after_submit(self):
#             if not self.get("__islocal") and self.docstatus == 1:
#                 prev_doc = frappe.get_doc(self.doctype, self.name)

#                 # ✅ These fields ARE allowed to change after submission
#                 allowed_fields = [
#                     "raw_material_cost",
#                     "total_cost",
#                     "total_raw_material_cost",
#                     "base_raw_material_cost",
#                     "base_total_cost",
#                     "base_total_operating_cost"
#                 ]

#                 # ❌ Ignore timestamps, autogenerated fields
#                 ignore_fields = ["idx", "modified", "modified_by", "owner", "creation", "docstatus"]

#                 for field in self.meta.get_valid_columns():
#                     if field in allowed_fields or field in ignore_fields:
#                         continue

#                     old = prev_doc.get(field)
#                     new = self.get(field)

#                     # Optional: handle float precision here if needed
#                     if old != new:
#                         frappe.throw(f"Not allowed to change {field} after submission from {old} to {new}")


#         # def validate_update_after_submit(self):
#         #     if self.docstatus != 1 or self.is_new():
#         #         return

#         #     prev_doc = self.get_doc_before_save()

#         #     allowed_fields = [
#         #         "raw_material_cost",
#         #         "total_cost",
#         #         "total_raw_material_cost",
#         #         "base_raw_material_cost",
#         #         "base_total_cost",
#         #         "base_total_operating_cost"
#         #     ]

#         #     # System-managed fields we want to ignore
#         #     ignore_fields = [
#         #         "creation", "modified", "modified_by", "owner", "idx", "docstatus", "parent", "parenttype", "parentfield", "name"
#         #     ]

#         #     for field in self.meta.get_valid_columns():
#         #         if field in allowed_fields or field in ignore_fields:
#         #             continue

#         #         old = prev_doc.get(field)
#         #         new = self.get(field)

#         #         if old != new:
#         #             frappe.log_error(f"Field changed: {field} | from {old} to {new}")
#         #             frappe.throw(f"Not allowed to change {field} after submission from {old} to {new}")
